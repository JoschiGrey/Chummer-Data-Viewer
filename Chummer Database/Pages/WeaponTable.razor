@page "/WeaponTable"
@using Chummer_Database.Extensions
@using Blazorise.Extensions
@inject HttpClient Client
@inject ILogger<WeaponTable> Logger

<div class="mt-2 d-flex align-content-center justify-content-center">
    <h1 class="text-decoration-underline">WeaponTable Test</h1>
</div>

<div>
    <div>
        @*<RadioGroup TValue="string" Name="Weapon Category" @bind-CheckedValue="SelectedCategory">
            @{
                if (WeaponCategories is not null)
                {
                    foreach (var category in WeaponCategories)
                    {
                        <Radio TValue="string" Value="@(category.Name)">@category.Name</Radio>
                    }
                    <Radio TValue="string" Value="@(string.Empty)">All</Radio>
                }
            }
        </RadioGroup>*@
        <Select TValue="string" @bind-SelectedValues="SelectedCategories" Multiple>
            @{
                if (WeaponCategories is not null)
                {
                    foreach (var category in WeaponCategories)
                    {
                        <SelectItem Value="@(category.Name)">@category.Name</SelectItem>
                    }
                    <SelectItem Value="@("All")">All</SelectItem>
                }
            }
        </Select>
    </div>
    <div>
        <DataGrid TItem="Weapon"
                  Data="Weapons"
                  @bind-SelectedRow="@SelectedWeapon"
                  @ref="@_dataGridRef"

                  SortMode="DataGridSortMode.Single"
                  Hoverable="true"
                  HeaderThemeContrast="ThemeContrast.Dark"
                  
                  ShowPager="true"
                  @bind-PageSize="_pageSize"
                  PageSizes="@(new []{5,10, 20, 50})"
                  PagerPosition="DataGridPagerPosition.Top"
                  PageChanged="@(args => _dataGridRef?.ScrollToRow(1).AsTask() ?? throw new InvalidOperationException())"
                  ShowPageSizes="true"
                  
                  FixedHeader="true"
                  
                  CustomFilter="@OnCustomFilter"
                  Filterable="true"
                  FilterMethod="DataGridFilterMethod.Contains"
                  >
            <DataGridColumns>
                @{
                    if (SelectedCategories.IsNullOrEmpty() || SelectedCategories?.Count > 1 || SelectedCategories?.First() == "All")
                    {
                        <DataGridColumn 
                            TItem="Weapon" 
                            Field="Category.Name" 
                            Caption="Category"></DataGridColumn>
                    }
                }
                <DataGridColumn 
                    TItem="Weapon" 
                    Field="@nameof(Weapon.Name)" 
                    Caption="Name" 
                    SortDirection="SortDirection.Ascending" 
                    Filterable/>
                <DataGridNumericColumn 
                    TItem="Weapon" 
                    Field="@nameof(Weapon.Accuracy)" 
                    Caption="ACC"
                    Filterable="false"/>
                <DataGridColumn 
                    TItem="Weapon"
                    Field="Damage.DisplayString" 
                    Caption="DAMAGE"
                    SortField="Damage.DamageAmount"
                    Filterable="false"/>
                <DataGridNumericColumn 
                    TItem="Weapon" 
                    Field="@nameof(Weapon.Ap)" 
                    Caption="AP"
                    Filterable="false"/>
                <DataGridColumn 
                    TItem="Weapon" 
                    Field="@nameof(Weapon.Mode)" 
                    Caption="Mode"
                    Filterable="false"/>
                <DataGridNumericColumn 
                    TItem="Weapon" 
                    Field="@nameof(Weapon.Rc)" 
                    Caption="RC"
                    Filterable="false"/>
                <DataGridNumericColumn 
                    TItem="Weapon" 
                    Field="Ammo.DisplayString" 
                    SortField="Ammo.MagazineSize" Caption="Ammo"
                    Filterable="false"/>
                <DataGridNumericColumn 
                    TItem="Weapon" 
                    Field="Availability.AvailabilityString" 
                    SortField="Availability.AvailabilityInt" 
                    Caption="Avail"
                    Filterable="false"/>
                <DataGridNumericColumn
                    TItem="Weapon" Field="@nameof(Weapon.Cost)" 
                    SortField="@nameof(Weapon.Page)" 
                    Caption="Cost"
                    CellClass="@(item => item.FormCostCssClass())"
                    Filterable="false"/>
                <DataGridColumn 
                    TItem="Weapon" 
                    Field="@nameof(Weapon.DisplaySource)" 
                    Caption="Source"
                    Filterable="false"/>
            </DataGridColumns>
        </DataGrid>
    </div>
</div>


@code {
    private HashSet<Weapon>? Weapons { get; set; }
    private Weapon? SelectedWeapon { get; set; }
    private HashSet<Category>? WeaponCategories { get; set; }
    private IReadOnlyList<string>? SelectedCategories { get; set; }
    private DataGrid<Weapon>? _dataGridRef;
    private int _pageSize = 10;
    

    protected override async Task OnInitializedAsync()
    {
        if (WeaponXmlData is null)
        {
            await LoadAll(Client, Logger);
        }
        Weapons = WeaponXmlData?.Weapons.ToHashSet();
        WeaponCategories = WeaponXmlData?.WeaponCategories.ToHashSet();
    }

    private bool OnCustomFilter(Weapon weapon)
    {
        if (weapon.Category is null)
            throw new ArgumentNullException(nameof(weapon.Category));
        if (SelectedCategories is null)
            return true;
        if (SelectedCategories.Count == 0)
            return true;
        if (SelectedCategories.First() == "All")
            return true;

        var selectedSet = SelectedCategories.ToHashSet();
        
        return selectedSet.Contains(weapon.Category.Name);
    }

}
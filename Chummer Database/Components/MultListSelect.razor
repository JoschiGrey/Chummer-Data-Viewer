@using System.Collections
@using System.ComponentModel
@using System.Reflection
@using Chummer_Database.Interfaces
@typeparam TValue
@typeparam TItem



<div class="grid-container mult-list-selector">
    <label Class="a" for="@InternalIdString">@Label</label>
    <div class="b"><Button class="delete-all-button" Color="Color.Primary" Clicked="OnUnselectAllClicked">Unselect All</Button></div>
    <div class="c">
        <Select ElementId="@InternalIdString" Class="mult-list-select" TValue="@TValue" SelectedValuesChanged="OnSelectedValuesChanged" Multiple>
            <Repeater TItem="@TItem" Items="Items">
                <SelectItem TValue="@TValue" Value="Value">@GetDisplayValue(context)</SelectItem>
            </Repeater>
        </Select>
    </div>
</div>


@code {
    private Guid _internalId = Guid.NewGuid();

    private string InternalIdString => _internalId.ToString();
    
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }

    [Parameter]
    public TValue? Value { get; set; }

    [Parameter] 
    public EventCallback<HashSet<TValue>> SelectedItemsChanged { get; set; }

    [Parameter] 
    public HashSet<TValue>? SelectedItems { get; set; } = new();

    private async Task OnSelectedValuesChanged(IReadOnlyList<TValue> list)
    {
        SelectedItems = list.ToHashSet();
        
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    private async Task OnUnselectAllClicked()
    {
        SelectedItems?.Clear();
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    private string GetDisplayValue(TItem item)
    {
        if (item is IDisplayable displayable)
            return displayable.DisplayName;
        if (item is string s)
            return s;
        throw new NotImplementedException("This is neither IDisplayable nor a string");
    }
}


<style>
    .mult-list-select{
        height: 100px;
        max-height: 100px;
        transition: max-height 0.8s ease-in-out, height 0.8s ease-in-out;
    }

    .mult-list-select:focus-within{
        height: @(Items?.Count() * 30)px;
        max-height: 400px;
    }
</style>